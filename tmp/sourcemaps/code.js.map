{"version":3,"sources":["code.ts"],"names":[],"mappings":"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","file":"../code.js","sourcesContent":["if (figma.command === 'blobify') {\n  blobify()\n} else if (figma.command === 'template') {\n  generateTemplate()\n}\n\nfunction generateTemplate() {\n  console.log(\"Generating template\");\n}\n\nfunction blobify() {\n  // Get selection\n  let initialSelection = figma.currentPage.selection\n  if (!initialSelection) {\n    figma.closePlugin('Please make a selection')\n  }\n\n  // Ensure selection is all Circles or Squaresds\n  const areAllCirclesOrSquares = initialSelection.every(shape => isCircle(shape) || isSquare(shape))\n  if (!areAllCirclesOrSquares) {\n    figma.closePlugin('Shapes must all be circles or squares')\n  }\n  const selection: Array<EllipseNode | RectangleNode> = [...initialSelection as Array<EllipseNode | RectangleNode>]\n\n  // Ensure all shapes are integer multiples of the smallest shape\n  const minWidth = Math.min(...selection.map(({width}) => width))\n  const maxWidth = Math.max(...selection.map(({width}) => width))\n  const minX = Math.min(...selection.map(({x}) => x))\n  const minY = Math.min(...selection.map(({y}) => y))\n\n  const areAllIntegerMultiples = selection.every(({width}) => width === minWidth || width === 2*minWidth || width === 3*minWidth || width === 4*minWidth)\n  if (!areAllIntegerMultiples) {\n    figma.closePlugin('Shapes must all be integer multiples of each other')\n  }\n\n  // Convert Circles to Squares\n  selection.forEach((shape, index) => {\n    if (isCircle(shape)) {\n      const {x, y, width, height, fills, parent} = shape\n      const rect = createNewRectangle({x, y, width, height, fills, parent})\n      shape.remove()\n      selection.splice(index, 1, rect)\n    }\n  })\n\n  // Expand each shape by 1px in each direction\n  selection.forEach((shape, index) => {\n    const {x, y, width, height, fills, parent} = shape\n    const rect = createNewRectangle({\n      x: x - 1,\n      y: y - 1,\n      width: width + 2,\n      height: height + 2,\n      fills, \n      parent\n    })\n    shape.remove()\n    selection.splice(index, 1, rect)\n  })\n\n  // Union all shapes\n  const union = figma.union(selection, selection[0].parent)\n\n  // Add fills & corner radius\n  union.fills = selection[0].fills\n  union.cornerRadius = maxWidth\n\n  // Flatten the union\n  const blob = figma.flatten([union])\n  blob.name = \"Blob\"\n  blob.resize(blob.width - 2, blob.height - 2);\n  blob.x = minX\n  blob.y = minY\n\n  figma.currentPage.selection = [blob]\n\n  figma.closePlugin('Created new LeafyGreen Blob')\n}\n\n/**\n * Utilities\n */\nfunction isCircle(shape: SceneNode): shape is EllipseNode {\n  return shape.type === \"ELLIPSE\" && shape.width === shape.height\n}\n\nfunction isSquare(shape: SceneNode): shape is RectangleNode {\n  return shape.type === \"RECTANGLE\" && shape.width === shape.height\n}\n\nfunction createNewRectangle({x, y, width, height, fills, parent}): RectangleNode {\n  const rect = figma.createRectangle()\n  rect.x = x\n  rect.y = y\n  rect.resize(width, height)\n  rect.fills = fills\n  parent.appendChild(rect)\n  return rect\n}"]}